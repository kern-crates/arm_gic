searchState.loadedDescShard("arm_gic", 0, "ARM Generic Interrupt Controller (GIC) register …\nEdge-triggered.\nMaximum number of interrupts supported by the GIC.\n<code>GenericArmGic</code>. It is used to implement the interface …\nDriver for an Arm Generic Interrupt Controller version 2.\nDriver for an Arm Generic Interrupt Controller version 3 …\nAn interrupt ID.\nDifferent types of interrupt that the GIC handles.\nLevel-sensitive.\nPrivate Peripheral Interrupt.\nSoftware-generated interrupt.\nShared Peripheral Interrupt.\nInterrupt trigger mode.\nDisable the interrupt with the given ID.\nDisable the interrupt with the given ID.\nEnables the interrupt with the given ID.pub fn …\nEnables the interrupt with the given ID.\nEnables the interrupt with the given ID.\nInforms the interrupt controller that the CPU has …\nInforms the interrupt controller that the CPU has …\nInforms the interrupt controller that the CPU has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the ID of the highest priority signalled interrupt, …\nGets the ID of the highest priority signalled interrupt, …\nInitialises the GIC.\nInitialises the GIC.\nInitialises the GIC.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nConstructs a new instance of the driver for a GIC with the …\nInitialises the GIC for the current CPU core.\nInitialises the GIC for the current CPU core.\nReturns the interrupt ID for the given Private Peripheral …\nConfigures the trigger type for the interrupt with the …\nConfigures the trigger type for the interrupt with the …\nConfigures the trigger type for the interrupt with the …\nReturns the interrupt ID for the given Software Generated …\nReturns the interrupt ID for the given Shared Peripheral …\nTranslate an interrupt of a given type to a GIC INTID.")